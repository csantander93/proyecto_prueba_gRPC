# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import stock_pb2 as stock__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in stock_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CadenaServiceStub(object):
    """Servicios de gRPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCadena = channel.unary_unary(
                '/cadena.CadenaService/GetCadena',
                request_serializer=stock__pb2.CadenaId.SerializeToString,
                response_deserializer=stock__pb2.Cadena.FromString,
                _registered_method=True)
        self.CreateCadena = channel.unary_unary(
                '/cadena.CadenaService/CreateCadena',
                request_serializer=stock__pb2.Cadena.SerializeToString,
                response_deserializer=stock__pb2.Cadena.FromString,
                _registered_method=True)
        self.DeleteCadena = channel.unary_unary(
                '/cadena.CadenaService/DeleteCadena',
                request_serializer=stock__pb2.CadenaId.SerializeToString,
                response_deserializer=stock__pb2.Empty.FromString,
                _registered_method=True)
        self.ListCadenas = channel.unary_unary(
                '/cadena.CadenaService/ListCadenas',
                request_serializer=stock__pb2.Empty.SerializeToString,
                response_deserializer=stock__pb2.CadenasList.FromString,
                _registered_method=True)


class CadenaServiceServicer(object):
    """Servicios de gRPC
    """

    def GetCadena(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCadena(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCadena(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCadenas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CadenaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCadena': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCadena,
                    request_deserializer=stock__pb2.CadenaId.FromString,
                    response_serializer=stock__pb2.Cadena.SerializeToString,
            ),
            'CreateCadena': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCadena,
                    request_deserializer=stock__pb2.Cadena.FromString,
                    response_serializer=stock__pb2.Cadena.SerializeToString,
            ),
            'DeleteCadena': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCadena,
                    request_deserializer=stock__pb2.CadenaId.FromString,
                    response_serializer=stock__pb2.Empty.SerializeToString,
            ),
            'ListCadenas': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCadenas,
                    request_deserializer=stock__pb2.Empty.FromString,
                    response_serializer=stock__pb2.CadenasList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cadena.CadenaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cadena.CadenaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CadenaService(object):
    """Servicios de gRPC
    """

    @staticmethod
    def GetCadena(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.CadenaService/GetCadena',
            stock__pb2.CadenaId.SerializeToString,
            stock__pb2.Cadena.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCadena(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.CadenaService/CreateCadena',
            stock__pb2.Cadena.SerializeToString,
            stock__pb2.Cadena.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCadena(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.CadenaService/DeleteCadena',
            stock__pb2.CadenaId.SerializeToString,
            stock__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCadenas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.CadenaService/ListCadenas',
            stock__pb2.Empty.SerializeToString,
            stock__pb2.CadenasList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ProductoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProducto = channel.unary_unary(
                '/cadena.ProductoService/GetProducto',
                request_serializer=stock__pb2.ProductoId.SerializeToString,
                response_deserializer=stock__pb2.Producto.FromString,
                _registered_method=True)
        self.CreateProducto = channel.unary_unary(
                '/cadena.ProductoService/CreateProducto',
                request_serializer=stock__pb2.Producto.SerializeToString,
                response_deserializer=stock__pb2.Producto.FromString,
                _registered_method=True)
        self.UpdateProducto = channel.unary_unary(
                '/cadena.ProductoService/UpdateProducto',
                request_serializer=stock__pb2.Producto.SerializeToString,
                response_deserializer=stock__pb2.Producto.FromString,
                _registered_method=True)
        self.ListProductos = channel.unary_unary(
                '/cadena.ProductoService/ListProductos',
                request_serializer=stock__pb2.Empty.SerializeToString,
                response_deserializer=stock__pb2.ProductosList.FromString,
                _registered_method=True)


class ProductoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProducto(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProducto(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProducto(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProductos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProducto': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProducto,
                    request_deserializer=stock__pb2.ProductoId.FromString,
                    response_serializer=stock__pb2.Producto.SerializeToString,
            ),
            'CreateProducto': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProducto,
                    request_deserializer=stock__pb2.Producto.FromString,
                    response_serializer=stock__pb2.Producto.SerializeToString,
            ),
            'UpdateProducto': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProducto,
                    request_deserializer=stock__pb2.Producto.FromString,
                    response_serializer=stock__pb2.Producto.SerializeToString,
            ),
            'ListProductos': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProductos,
                    request_deserializer=stock__pb2.Empty.FromString,
                    response_serializer=stock__pb2.ProductosList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cadena.ProductoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cadena.ProductoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProductoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProducto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.ProductoService/GetProducto',
            stock__pb2.ProductoId.SerializeToString,
            stock__pb2.Producto.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProducto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.ProductoService/CreateProducto',
            stock__pb2.Producto.SerializeToString,
            stock__pb2.Producto.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProducto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.ProductoService/UpdateProducto',
            stock__pb2.Producto.SerializeToString,
            stock__pb2.Producto.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListProductos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.ProductoService/ListProductos',
            stock__pb2.Empty.SerializeToString,
            stock__pb2.ProductosList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TiendaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTienda = channel.unary_unary(
                '/cadena.TiendaService/GetTienda',
                request_serializer=stock__pb2.TiendaId.SerializeToString,
                response_deserializer=stock__pb2.Tienda.FromString,
                _registered_method=True)
        self.CreateTienda = channel.unary_unary(
                '/cadena.TiendaService/CreateTienda',
                request_serializer=stock__pb2.Tienda.SerializeToString,
                response_deserializer=stock__pb2.Tienda.FromString,
                _registered_method=True)
        self.DeleteTienda = channel.unary_unary(
                '/cadena.TiendaService/DeleteTienda',
                request_serializer=stock__pb2.TiendaId.SerializeToString,
                response_deserializer=stock__pb2.Empty.FromString,
                _registered_method=True)
        self.ListTiendas = channel.unary_unary(
                '/cadena.TiendaService/ListTiendas',
                request_serializer=stock__pb2.Empty.SerializeToString,
                response_deserializer=stock__pb2.TiendasList.FromString,
                _registered_method=True)


class TiendaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTienda(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTienda(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTienda(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTiendas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TiendaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTienda': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTienda,
                    request_deserializer=stock__pb2.TiendaId.FromString,
                    response_serializer=stock__pb2.Tienda.SerializeToString,
            ),
            'CreateTienda': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTienda,
                    request_deserializer=stock__pb2.Tienda.FromString,
                    response_serializer=stock__pb2.Tienda.SerializeToString,
            ),
            'DeleteTienda': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTienda,
                    request_deserializer=stock__pb2.TiendaId.FromString,
                    response_serializer=stock__pb2.Empty.SerializeToString,
            ),
            'ListTiendas': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTiendas,
                    request_deserializer=stock__pb2.Empty.FromString,
                    response_serializer=stock__pb2.TiendasList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cadena.TiendaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cadena.TiendaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TiendaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTienda(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.TiendaService/GetTienda',
            stock__pb2.TiendaId.SerializeToString,
            stock__pb2.Tienda.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTienda(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.TiendaService/CreateTienda',
            stock__pb2.Tienda.SerializeToString,
            stock__pb2.Tienda.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTienda(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.TiendaService/DeleteTienda',
            stock__pb2.TiendaId.SerializeToString,
            stock__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTiendas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.TiendaService/ListTiendas',
            stock__pb2.Empty.SerializeToString,
            stock__pb2.TiendasList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UsuarioServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUsuario = channel.unary_unary(
                '/cadena.UsuarioService/GetUsuario',
                request_serializer=stock__pb2.UsuarioId.SerializeToString,
                response_deserializer=stock__pb2.Usuario.FromString,
                _registered_method=True)
        self.CreateUsuario = channel.unary_unary(
                '/cadena.UsuarioService/CreateUsuario',
                request_serializer=stock__pb2.Usuario.SerializeToString,
                response_deserializer=stock__pb2.Usuario.FromString,
                _registered_method=True)
        self.UpdateUsuario = channel.unary_unary(
                '/cadena.UsuarioService/UpdateUsuario',
                request_serializer=stock__pb2.Usuario.SerializeToString,
                response_deserializer=stock__pb2.Usuario.FromString,
                _registered_method=True)
        self.DeleteUsuario = channel.unary_unary(
                '/cadena.UsuarioService/DeleteUsuario',
                request_serializer=stock__pb2.UsuarioId.SerializeToString,
                response_deserializer=stock__pb2.Empty.FromString,
                _registered_method=True)
        self.ListUsuarios = channel.unary_unary(
                '/cadena.UsuarioService/ListUsuarios',
                request_serializer=stock__pb2.Empty.SerializeToString,
                response_deserializer=stock__pb2.UsuariosList.FromString,
                _registered_method=True)


class UsuarioServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsuarios(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsuarioServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsuario,
                    request_deserializer=stock__pb2.UsuarioId.FromString,
                    response_serializer=stock__pb2.Usuario.SerializeToString,
            ),
            'CreateUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUsuario,
                    request_deserializer=stock__pb2.Usuario.FromString,
                    response_serializer=stock__pb2.Usuario.SerializeToString,
            ),
            'UpdateUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUsuario,
                    request_deserializer=stock__pb2.Usuario.FromString,
                    response_serializer=stock__pb2.Usuario.SerializeToString,
            ),
            'DeleteUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUsuario,
                    request_deserializer=stock__pb2.UsuarioId.FromString,
                    response_serializer=stock__pb2.Empty.SerializeToString,
            ),
            'ListUsuarios': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsuarios,
                    request_deserializer=stock__pb2.Empty.FromString,
                    response_serializer=stock__pb2.UsuariosList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cadena.UsuarioService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cadena.UsuarioService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UsuarioService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.UsuarioService/GetUsuario',
            stock__pb2.UsuarioId.SerializeToString,
            stock__pb2.Usuario.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.UsuarioService/CreateUsuario',
            stock__pb2.Usuario.SerializeToString,
            stock__pb2.Usuario.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.UsuarioService/UpdateUsuario',
            stock__pb2.Usuario.SerializeToString,
            stock__pb2.Usuario.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.UsuarioService/DeleteUsuario',
            stock__pb2.UsuarioId.SerializeToString,
            stock__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsuarios(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.UsuarioService/ListUsuarios',
            stock__pb2.Empty.SerializeToString,
            stock__pb2.UsuariosList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StockServiceStub(object):
    """Métodos para modificar stock
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateStock = channel.unary_unary(
                '/cadena.StockService/UpdateStock',
                request_serializer=stock__pb2.Producto.SerializeToString,
                response_deserializer=stock__pb2.Producto.FromString,
                _registered_method=True)


class StockServiceServicer(object):
    """Métodos para modificar stock
    """

    def UpdateStock(self, request, context):
        """Para modificar stock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateStock': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStock,
                    request_deserializer=stock__pb2.Producto.FromString,
                    response_serializer=stock__pb2.Producto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cadena.StockService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cadena.StockService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StockService(object):
    """Métodos para modificar stock
    """

    @staticmethod
    def UpdateStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cadena.StockService/UpdateStock',
            stock__pb2.Producto.SerializeToString,
            stock__pb2.Producto.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
